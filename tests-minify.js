function mockRandomMouseClicks(a){for(i=0;i<a;++i){var l={clientX:Math.random()*canvas.width+canvas.offsetLeft,clientY:Math.random()*canvas.height+canvas.offsetTop};mouseUpHandler(l)}}QUnit.test("Mock mouse clicks to create random balls",function(a){balls=[],mockRandomMouseClicks(10);var l=null;for(i=0;i<balls.length;++i){var e=balls[i];a.ok(-maxSpeed<e.dx&&e.dx<maxSpeed,"[OK] ball:"+i+" has initial dx:"+e.dx),a.ok(-maxSpeed<e.dy&&e.dy<0,"[OK] ball:"+i+" has initial dy:"+e.dy),a.ok(0==e.bounce,"[OK] ball:"+i+" has initial bounce:"+e.bounce),a.ok(0==e.stopped,"[OK] ball:"+i+" has initial stopped:"+e.stopped),a.ok(e.t-Date.now()/1e3<60,"[OK] ball:"+i+" is recently created:"+e.t),null!=l&&a.notPropEqual(e,l,"[OK] each ball has randomly generated values."),l=e}balls=[]}),QUnit.test("Concave maximum of balls decreases over time",async function(a){balls=[],mockRandomMouseClicks(20);var l=l=>new Promise(e=>{!function s(){if(l.stopped)return e();l.prevDy<0&&l.dy>0&&(null==l.lastPeak?l.lastPeak=l.y:l.lastPeak-l.y<threshold&&(a.ok(l.lastPeak<l.y,"[OK] ball:"+l.i+", y-offset increased: "+l.lastPeak+" => "+l.y),l.lastPeak=l.y)),l.prevDy=l.dy,setTimeout(s,100)}()}),e=[];for(i=0;i<balls.length;++i){var s=balls[i];s.i=i,e.push(l(s))}await Promise.all(e),balls=[]}),QUnit.test("Balls stop at random position",async function(a){balls=[],mockRandomMouseClicks(30);var l=a=>new Promise(l=>{!function e(){if(a.stopped)return l();setTimeout(e,100)}()}),e=[];for(i=0;i<balls.length;++i){var s=balls[i];e.push(l(s))}await Promise.all(e);var o=null;for(i=0;i<balls.length;++i){s=balls[i];a.ok(Math.abs(s.y-canvas.height)<ballRadius,"[OK] ball:"+i+" has final y:"+s.y),a.equal(s.dx,0,"[OK] ball:"+i+" has zero dx"),a.equal(s.dy,0,"[OK] ball:"+i+" has zero dy"),a.equal(s.stopped,!0,"[OK] ball:"+i+" stopped: "+s.stopped),a.ok(s.bounce>0,"[OK] bounce:"+s.bounce),null!=o&&a.notPropEqual(s,o,"[OK] each ball stops at a random position."),o=s}balls=[]});